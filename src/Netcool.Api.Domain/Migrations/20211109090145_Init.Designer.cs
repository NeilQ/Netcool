// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Netcool.Api.Domain.EfCore;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Netcool.Api.Domain.Migrations
{
    [DbContext(typeof(NetcoolDbContext))]
    [Migration("20211109090145_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Netcool.Api.Domain.Configuration.AppConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1000L, null, null, null, null, null);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<int?>("CreateUserId")
                        .HasColumnType("integer")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("delete_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnType("integer")
                        .HasColumnName("delete_user_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsInitial")
                        .HasColumnType("boolean")
                        .HasColumnName("is_initial");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("integer")
                        .HasColumnName("update_user_id");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_app_configurations");

                    b.ToTable("app_configurations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "默认用户密码",
                            IsDeleted = false,
                            IsInitial = true,
                            Name = "User.DefaultPassword",
                            Type = 0,
                            Value = "123456"
                        });
                });

            modelBuilder.Entity("Netcool.Api.Domain.Files.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<int?>("CreateUserId")
                        .HasColumnType("integer")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("delete_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnType("integer")
                        .HasColumnName("delete_user_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Filename")
                        .HasColumnType("text")
                        .HasColumnName("filename");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("integer")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id")
                        .HasName("pk_files");

                    b.HasIndex(new[] { "Filename" }, "index_files_filename")
                        .IsUnique()
                        .HasDatabaseName("ix_files_filename");

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("Netcool.Api.Domain.Menus.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1000L, null, null, null, null, null);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<int?>("CreateUserId")
                        .HasColumnType("integer")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("delete_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnType("integer")
                        .HasColumnName("delete_user_id");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<string>("Path")
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<string>("Route")
                        .HasColumnType("text")
                        .HasColumnName("route");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("integer")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id")
                        .HasName("pk_menus");

                    b.ToTable("menus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayName = "首页",
                            Icon = "home",
                            IsDeleted = false,
                            Level = 1,
                            Name = "dashboard",
                            Order = 1,
                            ParentId = 0,
                            Path = "/1",
                            Route = "/dashboard",
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            DisplayName = "系统设置",
                            Icon = "setting",
                            IsDeleted = false,
                            Level = 1,
                            Name = "system",
                            Order = 2,
                            ParentId = 0,
                            Path = "/2",
                            Route = "/system",
                            Type = 0
                        },
                        new
                        {
                            Id = 20,
                            DisplayName = "应用配置",
                            Icon = "setting",
                            IsDeleted = false,
                            Level = 2,
                            Name = "app-configuration",
                            Order = 1,
                            ParentId = 2,
                            Path = "/2/20",
                            Route = "/app-configuration",
                            Type = 1
                        },
                        new
                        {
                            Id = 21,
                            DisplayName = "组织",
                            Icon = "apartment",
                            IsDeleted = false,
                            Level = 2,
                            Name = "organization",
                            Order = 2,
                            ParentId = 2,
                            Path = "/2/21",
                            Route = "/organization",
                            Type = 1
                        },
                        new
                        {
                            Id = 22,
                            DisplayName = "公告",
                            Icon = "notification",
                            IsDeleted = false,
                            Level = 2,
                            Name = "announcement",
                            Order = 3,
                            ParentId = 2,
                            Path = "/2/22",
                            Route = "/announcement",
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            DisplayName = "权限管理",
                            Icon = "safety-certificate",
                            IsDeleted = false,
                            Level = 1,
                            Name = "auth",
                            Order = 3,
                            ParentId = 0,
                            Path = "/3",
                            Route = "/auth",
                            Type = 0
                        },
                        new
                        {
                            Id = 30,
                            DisplayName = "菜单管理",
                            Icon = "menu",
                            IsDeleted = false,
                            Level = 2,
                            Name = "menu",
                            Order = 1,
                            ParentId = 3,
                            Path = "/3/30",
                            Route = "/menu",
                            Type = 1
                        },
                        new
                        {
                            Id = 31,
                            DisplayName = "角色管理",
                            Icon = "usergroup-add",
                            IsDeleted = false,
                            Level = 2,
                            Name = "role",
                            Order = 2,
                            ParentId = 3,
                            Path = "/3/31",
                            Route = "/role",
                            Type = 1
                        },
                        new
                        {
                            Id = 32,
                            DisplayName = "用户管理",
                            Icon = "user",
                            IsDeleted = false,
                            Level = 2,
                            Name = "user",
                            Order = 3,
                            ParentId = 3,
                            Path = "/3/32",
                            Route = "/user",
                            Type = 1
                        });
                });

            modelBuilder.Entity("Netcool.Api.Domain.Organizations.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1000L, null, null, null, null, null);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<int?>("CreateUserId")
                        .HasColumnType("integer")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("delete_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnType("integer")
                        .HasColumnName("delete_user_id");

                    b.Property<int>("Depth")
                        .HasColumnType("integer")
                        .HasColumnName("depth");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<string>("Path")
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("integer")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id")
                        .HasName("pk_organizations");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_organizations_parent_id");

                    b.ToTable("organizations", (string)null);
                });

            modelBuilder.Entity("Netcool.Api.Domain.Permissions.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1000L, null, null, null, null, null);

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<int?>("CreateUserId")
                        .HasColumnType("integer")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("delete_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnType("integer")
                        .HasColumnName("delete_user_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("MenuId")
                        .HasColumnType("integer")
                        .HasColumnName("menu_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("integer")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.HasIndex("MenuId")
                        .HasDatabaseName("ix_permissions_menu_id");

                    b.ToTable("permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "home.view",
                            IsDeleted = false,
                            MenuId = 1,
                            Name = "首页",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Code = "system.view",
                            IsDeleted = false,
                            MenuId = 2,
                            Name = "系统",
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            Code = "auth.view",
                            IsDeleted = false,
                            MenuId = 3,
                            Name = "权限",
                            Type = 0
                        },
                        new
                        {
                            Id = 20,
                            Code = "config.view",
                            IsDeleted = false,
                            MenuId = 20,
                            Name = "配置",
                            Type = 0
                        },
                        new
                        {
                            Id = 100,
                            Code = "config.create",
                            IsDeleted = false,
                            MenuId = 20,
                            Name = "配置新增",
                            Type = 1
                        },
                        new
                        {
                            Id = 101,
                            Code = "config.update",
                            IsDeleted = false,
                            MenuId = 20,
                            Name = "配置修改",
                            Type = 1
                        },
                        new
                        {
                            Id = 102,
                            Code = "config.delete",
                            IsDeleted = false,
                            MenuId = 20,
                            Name = "配置删除",
                            Type = 1
                        },
                        new
                        {
                            Id = 21,
                            Code = "organization.view",
                            IsDeleted = false,
                            MenuId = 21,
                            Name = "组织",
                            Type = 0
                        },
                        new
                        {
                            Id = 103,
                            Code = "organization.create",
                            IsDeleted = false,
                            MenuId = 21,
                            Name = "组织新增",
                            Type = 1
                        },
                        new
                        {
                            Id = 104,
                            Code = "organization.update",
                            IsDeleted = false,
                            MenuId = 21,
                            Name = "组织修改",
                            Type = 1
                        },
                        new
                        {
                            Id = 105,
                            Code = "organization.delete",
                            IsDeleted = false,
                            MenuId = 21,
                            Name = "组织删除",
                            Type = 1
                        },
                        new
                        {
                            Id = 22,
                            Code = "announcement.view",
                            IsDeleted = false,
                            MenuId = 22,
                            Name = "公告",
                            Type = 0
                        },
                        new
                        {
                            Id = 140,
                            Code = "announcement.create",
                            IsDeleted = false,
                            MenuId = 22,
                            Name = "公告新增",
                            Type = 1
                        },
                        new
                        {
                            Id = 141,
                            Code = "announcement.update",
                            IsDeleted = false,
                            MenuId = 22,
                            Name = "公告修改",
                            Type = 1
                        },
                        new
                        {
                            Id = 142,
                            Code = "announcement.delete",
                            IsDeleted = false,
                            MenuId = 22,
                            Name = "公告删除",
                            Type = 1
                        },
                        new
                        {
                            Id = 143,
                            Code = "announcement.publish",
                            IsDeleted = false,
                            MenuId = 22,
                            Name = "公告发布",
                            Type = 1
                        },
                        new
                        {
                            Id = 30,
                            Code = "menu.view",
                            IsDeleted = false,
                            MenuId = 30,
                            Name = "菜单",
                            Type = 0
                        },
                        new
                        {
                            Id = 110,
                            Code = "menu.update",
                            IsDeleted = false,
                            MenuId = 30,
                            Name = "菜单修改",
                            Type = 1
                        },
                        new
                        {
                            Id = 31,
                            Code = "role.view",
                            IsDeleted = false,
                            MenuId = 31,
                            Name = "角色",
                            Type = 0
                        },
                        new
                        {
                            Id = 120,
                            Code = "role.create",
                            IsDeleted = false,
                            MenuId = 31,
                            Name = "角色新增",
                            Type = 1
                        },
                        new
                        {
                            Id = 121,
                            Code = "role.update",
                            IsDeleted = false,
                            MenuId = 31,
                            Name = "角色修改",
                            Type = 1
                        },
                        new
                        {
                            Id = 122,
                            Code = "role.delete",
                            IsDeleted = false,
                            MenuId = 31,
                            Name = "角色删除",
                            Type = 1
                        },
                        new
                        {
                            Id = 123,
                            Code = "role.set-permissions",
                            IsDeleted = false,
                            MenuId = 31,
                            Name = "设置角色权限",
                            Type = 1
                        },
                        new
                        {
                            Id = 32,
                            Code = "user.view",
                            IsDeleted = false,
                            MenuId = 32,
                            Name = "用户",
                            Type = 0
                        },
                        new
                        {
                            Id = 130,
                            Code = "user.create",
                            IsDeleted = false,
                            MenuId = 32,
                            Name = "用户新增",
                            Type = 1
                        },
                        new
                        {
                            Id = 131,
                            Code = "user.update",
                            IsDeleted = false,
                            MenuId = 32,
                            Name = "用户修改",
                            Type = 1
                        },
                        new
                        {
                            Id = 132,
                            Code = "user.delete",
                            IsDeleted = false,
                            MenuId = 32,
                            Name = "用户删除",
                            Type = 1
                        },
                        new
                        {
                            Id = 133,
                            Code = "user.set-roles",
                            IsDeleted = false,
                            MenuId = 32,
                            Name = "设置用户角色",
                            Type = 1
                        });
                });

            modelBuilder.Entity("Netcool.Api.Domain.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1000L, null, null, null, null, null);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<int?>("CreateUserId")
                        .HasColumnType("integer")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("delete_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnType("integer")
                        .HasColumnName("delete_user_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("integer")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "超级管理员"
                        });
                });

            modelBuilder.Entity("Netcool.Api.Domain.Roles.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1000L, null, null, null, null, null);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<int?>("CreateUserId")
                        .HasColumnType("integer")
                        .HasColumnName("create_user_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_permissions");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_role_permissions_permission_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_permissions_role_id");

                    b.ToTable("role_permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PermissionId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            PermissionId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            PermissionId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            PermissionId = 20,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 5,
                            PermissionId = 100,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 6,
                            PermissionId = 101,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 7,
                            PermissionId = 102,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 8,
                            PermissionId = 21,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 9,
                            PermissionId = 103,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 10,
                            PermissionId = 104,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 11,
                            PermissionId = 105,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 12,
                            PermissionId = 22,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 13,
                            PermissionId = 140,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 14,
                            PermissionId = 141,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 15,
                            PermissionId = 142,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 16,
                            PermissionId = 143,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 17,
                            PermissionId = 30,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 18,
                            PermissionId = 110,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 19,
                            PermissionId = 31,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 20,
                            PermissionId = 120,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 21,
                            PermissionId = 121,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 22,
                            PermissionId = 122,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 23,
                            PermissionId = 123,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 24,
                            PermissionId = 32,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 25,
                            PermissionId = 130,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 26,
                            PermissionId = 131,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 27,
                            PermissionId = 132,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 28,
                            PermissionId = 133,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Netcool.Api.Domain.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1000L, null, null, null, null, null);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<int?>("CreateUserId")
                        .HasColumnType("integer")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("delete_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnType("integer")
                        .HasColumnName("delete_user_id");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("integer")
                        .HasColumnName("organization_id");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("integer")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_users_organization_id");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayName = "Admin",
                            Gender = 0,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "admin",
                            Password = "21232F297A57A5A743894A0E4A801FC3"
                        });
                });

            modelBuilder.Entity("Netcool.Api.Domain.Users.UserLoginAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BrowserInfo")
                        .HasColumnType("text")
                        .HasColumnName("browser_info");

                    b.Property<string>("ClientIp")
                        .HasColumnType("text")
                        .HasColumnName("client_ip");

                    b.Property<string>("ClientName")
                        .HasColumnType("text")
                        .HasColumnName("client_name");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<int?>("CreateUserId")
                        .HasColumnType("integer")
                        .HasColumnName("create_user_id");

                    b.Property<string>("LoginName")
                        .HasColumnType("text")
                        .HasColumnName("login_name");

                    b.Property<bool>("Success")
                        .HasColumnType("boolean")
                        .HasColumnName("success");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_login_attempts");

                    b.ToTable("user_login_attempts", (string)null);
                });

            modelBuilder.Entity("Netcool.Api.Domain.Users.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1000L, null, null, null, null, null);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<int?>("CreateUserId")
                        .HasColumnType("integer")
                        .HasColumnName("create_user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_roles_user_id");

                    b.ToTable("user_roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Netcool.Core.Announcements.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<int?>("CreateUserId")
                        .HasColumnType("integer")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("delete_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnType("integer")
                        .HasColumnName("delete_user_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("NotifyTargetType")
                        .HasColumnType("integer")
                        .HasColumnName("notify_target_type");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("integer")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id")
                        .HasName("pk_announcements");

                    b.ToTable("announcements", (string)null);
                });

            modelBuilder.Entity("Netcool.Core.Announcements.UserAnnouncement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnnouncementId")
                        .HasColumnType("integer")
                        .HasColumnName("announcement_id");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<DateTime?>("ReadTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("read_time");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_announcements");

                    b.HasIndex("AnnouncementId")
                        .HasDatabaseName("ix_user_announcements_announcement_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_announcements_user_id");

                    b.ToTable("user_announcements", (string)null);
                });

            modelBuilder.Entity("Netcool.Api.Domain.Organizations.Organization", b =>
                {
                    b.HasOne("Netcool.Api.Domain.Organizations.Organization", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_organizations_organizations_parent_id");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Netcool.Api.Domain.Permissions.Permission", b =>
                {
                    b.HasOne("Netcool.Api.Domain.Menus.Menu", "Menu")
                        .WithMany("Permissions")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_permissions_menus_menu_id");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Netcool.Api.Domain.Roles.RolePermission", b =>
                {
                    b.HasOne("Netcool.Api.Domain.Permissions.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_permissions_permission_id");

                    b.HasOne("Netcool.Api.Domain.Roles.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_roles_role_id");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Netcool.Api.Domain.Users.User", b =>
                {
                    b.HasOne("Netcool.Api.Domain.Organizations.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("fk_users_organizations_organization_id");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Netcool.Api.Domain.Users.UserRole", b =>
                {
                    b.HasOne("Netcool.Api.Domain.Roles.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("Netcool.Api.Domain.Users.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Netcool.Core.Announcements.UserAnnouncement", b =>
                {
                    b.HasOne("Netcool.Core.Announcements.Announcement", "Announcement")
                        .WithMany()
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_announcements_announcements_announcement_id");

                    b.HasOne("Netcool.Api.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_announcements_users_user_id");

                    b.Navigation("Announcement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Netcool.Api.Domain.Menus.Menu", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Netcool.Api.Domain.Permissions.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Netcool.Api.Domain.Roles.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Netcool.Api.Domain.Users.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
